package MpsLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class UniqueStructureName_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public UniqueStructureName_NonTypesystemRule() {
  }
  public void applyRule(final SNode structureDefinition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode dataDictionary = (SNode) SNodeOperations.getParent(structureDefinition);

    for (SNode structureDefinitionIterator : ListSequence.fromList(SLinkOperations.getChildren(dataDictionary, LINKS.structures$Wxxz))) {
      if ((structureDefinition != structureDefinitionIterator) && (SPropertyOperations.getString(structureDefinitionIterator, PROPS.name$MnvL) != null) && SPropertyOperations.getString(structureDefinitionIterator, PROPS.name$MnvL).equalsIgnoreCase(SPropertyOperations.getString(structureDefinition, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(structureDefinition, "Structure definition with this name already exists!", "r:04ddfd30-4b1c-42ed-82cb-c5fd47e8568c(MpsLanguage.typesystem)", "3975302705258405886", null, errorTarget);
        }
        break;
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.StructureDefinition$UL;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink structures$Wxxz = MetaAdapterFactory.getContainmentLink(0xf06cb947e5a84701L, 0x9c0629d6e3bd07f9L, 0x21b0e207472b2356L, 0x21b0e207472b2359L, "structures");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StructureDefinition$UL = MetaAdapterFactory.getConcept(0xf06cb947e5a84701L, 0x9c0629d6e3bd07f9L, 0x21b0e207472b2358L, "MpsLanguage.structure.StructureDefinition");
  }
}
